#include<bits/stdc++.h>
using namespace std;
bool detect(int src,map<int,vector<int>> &edges,vector<int>&vis){
    queue<pair<int,int>>q;
    q.push({src,-1});
    vis[src]=1;
    while(!q.empty()){
        int node=q.front().first;
        int parent=q.front().second;
        q.pop();
        for(auto x:edges[node]){
            if(!vis[x]){
                q.push({x,node});
                vis[x]=1;

            }
            else if(x!=parent) return true;
        }

    }
    return false;
}

string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    // Write your code here.
   map<int,vector<int>>adj;
   for(int i=0;i<edges.size();i++){
       adj[edges[i][0]].push_back(edges[i][1]);
       adj[edges[i][1]].push_back(edges[i][0]);

   }
    vector<int>vis(n+1,0);
    for(int i=1;i<=n;i++){
        if(!vis[i]){
            if(detect(i,adj,vis)==true) return "Yes";
        }
    }
    return "No";
}
