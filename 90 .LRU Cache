#include<bits/stdc++.h>

class LRUCache
{
public:
    struct Node{
        int key;
        int val;
        Node* prev;
        Node* next;
        Node(int _key,int _val){
            key=_key;
            val=_val;
            prev=nullptr;
            next=nullptr;
        }
    };

    int cap;
    map<int,Node*>mp;
    Node* head=new Node(-1,-1);
    Node* tail=new Node(-1,-1);
public:
    LRUCache(int capacity)
    {
        // Write your code here
        cap=capacity;
        head->next=tail;
        tail->prev=head;
    }
    void insertNode(Node* node){
        Node* temp=head->next;
        node->prev=head;
        node->next=temp;
        head->next=node;
        temp->prev=node;
    }

    void deleteNode(Node* node){
        Node* delprev=node->prev;
        Node* delnext=node->next;
        delprev->next=delnext;
        delnext->prev=delprev;
    }
    int get(int key)
    {
        // Write your code here

        if(mp.find(key)==mp.end()) return -1;
        Node* existingNode=mp[key];
        int v=existingNode->val;
        deleteNode(existingNode);
        mp.erase(key);
        Node* newNode=new Node(key,v);
        insertNode(newNode);
        mp.insert({key,newNode});
        return v;
    }

    void put(int key, int value)
    {
        // Write your code here
        if(mp.find(key)!=mp.end()){
            Node* existingNode=mp[key];
            mp.erase(key);
            deleteNode(existingNode);
        }
        if(mp.size()==cap){
            mp.erase(tail->prev->key);
            deleteNode(tail->prev);
        }
        Node* newNode=new Node(key,value);
        insertNode(newNode);
        mp.insert({key,newNode});
    }
};
